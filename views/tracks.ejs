<!DOCTYPE html>
<html>
<!-- prevents favicon request -->
<link rel="icon" href="data:,">
<link rel="stylesheet" href="/stylesheets/style.css" type="text/css">
<link rel="stylesheet" href="/stylesheets/tracks.css" type="text/css">
<head>
  <title>Tracks</title>
</head>
<body>
  <%- include('./partials/nav'); %>
  <div>
    <div id="track-table-container">
      <div id="track-table">
        <div class="table-header-row">
          <div class="title-header">
            Title
          </div>
          <div class="artist-header">
            Arist
          </div>
          <div class="album-header">
            Album
          </div>
          <div class="duration-header">
            Duration
          </div>
        </div>
        <div id="track-table-body">
          <% items.forEach((item) => { %>
            <div
              class="track-item"
              data-track-title="<%= item.track.name %>"
              data-track-artists="<%= item.track.artistNames %>"
              data-track-album="<%= item.track.album.name %>"
              onclick="searchDiscogs(this)"
            >
              <div class="track-name"><%= item.track.name %></div>
              <div class="track-artist"><%= item.track.artistNames %></div>
              <div class="track-album"><%= item.track.album.name %></div>
              <div class="track-duration"><%= item.track.duration_ms %></div>
          </div>
          <% }); %>
        </div>
      </div>
    </div>
    <div id="search-container" class="search-container-minimized">^</div>
  </div>
  <script type="text/javascript">
    function searchDiscogs(trackElement) {
      const title = trackElement.dataset.trackTitle
      const artistNames = trackElement.dataset.trackArtists
      const album = trackElement.dataset.trackAlbum

      const xmlGetRequest = new XMLHttpRequest();
      const url = `${window.location.origin}/search?artist=${artistNames}&title=${title}&album=${album}`;
      const params = {
        title: encodeURIComponent(title),
        artist: encodeURIComponent(artistNames),
        album: encodeURIComponent(album)
      };
      xmlGetRequest.open("GET", url, true);

      xmlGetRequest.onreadystatechange = function () {
        if (xmlGetRequest.readyState === 4 && xmlGetRequest.status === 200) {
          renderReleases(trackElement, JSON.parse(xmlGetRequest.response));
        }
      };

      xmlGetRequest.send(params);
    };

    function renderReleases(trackElement, releases) {
      if (releases.length === 0) {
        trackElement.appendChild(noSearchResults);
      } else {
        const releaseContainer = document.createElement('tr');

        releases.forEach((release) => {
          releaseContainer.appendChild(releaseItem(release));
        });

        trackElement.insertAdjacentElement('afterend', releaseContainer);
      }
    };

    function releaseItem(release) {
      const releaseContainer = document.createElement('td');
      releaseContainer.classList.add('release-item');

      const releaseThumb = document.createElement('img');
      releaseThumb.src = release.thumb;

      releaseContainer.appendChild(releaseThumb);

      const releaseDetail = document.createElement('div');
      releaseDetail.textContent = release.title;
      releaseContainer.appendChild(releaseDetail);

      return releaseContainer;
    };

    const noSearchResults = Object.assign(
      document.createElement('div'),
      { innerHTML: "No results from search" }
    );

    const searchContainerToggle = document.getElementById('search-container');
    searchContainerToggle.onclick = function(e) {
      if (e.target.classList.contains('search-container-minimized')) {
        e.target.classList.remove('search-container-minimized');
        e.target.classList.add('search-container-expanded');
      } else if (e.target.classList.contains('search-container-expanded')) {
        e.target.classList.remove('search-container-expanded');
        e.target.classList.add('search-container-minimized');
      }
    }
  </script>
</body>
</html>